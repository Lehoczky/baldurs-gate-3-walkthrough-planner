{
  "extends": [
    "plugin:vue/vue3-recommended",
    "eslint:recommended",
    "@vue/eslint-config-typescript",
    "@vue/eslint-config-prettier/skip-formatting",
    "../../.eslintrc.json"
  ],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx", "*.vue"],
      "rules": {}
    },
    {
      "files": ["*.ts", "*.tsx", "*.vue"],
      "parserOptions": {
        "project": ["apps/frontend/tsconfig.*?.json"]
      },
      "rules": {
        "@typescript-eslint/no-confusing-void-expression": [
          "warn",
          { "ignoreArrowShorthand": true }
        ],
        "@typescript-eslint/no-for-in-array": "warn",
        "@typescript-eslint/no-misused-promises": [
          "warn",
          { "checksVoidReturn": false }
        ],
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",
        "@typescript-eslint/prefer-return-this-type": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/promise-function-async": [
          "warn",
          { "checkArrowFunctions": false }
        ],

        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "warn",
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": [
          "warn",
          {
            "allowThrowingUnknown": true
          }
        ],
        "require-await": "off",
        "@typescript-eslint/require-await": "warn",
        "no-return-await": "off",
        "@typescript-eslint/return-await": ["warn", "always"],
        "camelcase": "off",
        "@typescript-eslint/naming-convention": [
          // Ignore properties that require quotes
          "warn",
          {
            "selector": "property",
            "format": ["camelCase"],
            "filter": {
              // you can expand this regex as you find more cases that require quoting that you want to allow
              "regex": "^[{A-Z} | {0-9}]|[- ]",
              "match": false
            }
          }
        ],

        "@typescript-eslint/prefer-includes": "warn"
      }
    },
    {
      "files": ["*.vue"],
      "parser": "vue-eslint-parser",
      "parserOptions": {
        "parser": "@typescript-eslint/parser",
        "project": ["apps/frontend/tsconfig.*?.json"]
      },
      "rules": {
        "vue/component-api-style": ["warn", ["script-setup"]],
        "vue/component-name-in-template-casing": [
          "warn",
          "PascalCase",
          {
            "ignores": []
          }
        ],
        "vue/custom-event-name-casing": ["warn", "kebab-case"],
        "vue/define-emits-declaration": ["error", "type-based"],
        "vue/html-self-closing": ["warn", { "html": { "void": "always" } }],
        "vue/next-tick-style": ["error", "promise"],
        "vue/no-ref-object-destructure": "warn",
        "vue/no-required-prop-with-default": "warn",
        "vue/no-static-inline-styles": "warn",
        "vue/no-this-in-before-route-enter": "warn",
        "vue/no-useless-mustaches": "warn",
        "vue/no-useless-v-bind": "warn",
        "vue/component-tags-order": [
          "error",
          {
            "order": [
              "i18n",
              "template",
              "script:not([setup])",
              "script[setup]",
              "style"
            ]
          }
        ],
        "vue/prefer-separate-static-class": "warn",
        "vue/prefer-true-attribute-shorthand": "warn",
        "vue/dot-notation": "warn",
        "vue/eqeqeq": ["warn", "smart"],
        "vue/no-sparse-arrays": "warn",
        "vue/no-useless-concat": "warn",
        "vue/prefer-template": "warn",
        "vue/multi-word-component-names": "off",
        "vue/no-v-html": "off",
        "vue/no-dupe-keys": "off"
      }
    }
  ]
}
